/**
* FUNCTION BLOCK tempRadius
* Used to determinate the Player's temperature radius to the Maze Exit.
* @author John Shields - G00348436
*
* The input variables are playerLocation and mazeExit.
* Their terms work with the inference rules set to calculate the Defuzzify's output for the player's temperature radius with the Maze Exit.
* The number values were worked out by declaring a variable named playerLocation in GameWindow.
* playerLocation is used in the keyPressed method and is initialized to equal the sum of the player's currentRow and currentCol.
* This tracks the player's index coordinates whenever a key is pressed.
* The variable mazeExit in GameWindow is randomly picked between 1 and 30 when the game starts.
* With this setup, a brute force approach was used to cover all possible maze exits for the inference rules.
*
* The Defuzzifier uses COGS. This Defuzzifier was picked as the Singleton outputs worked best with an if/else statement.
*
* This FCL file works with the classes TempRadius and MazeExitLocator.
* TempRadius is used to take in the variables playerLocation and mazeExit in GameWindow and put them through the Defuzzier.
* In MazeExitLocator, TempRadius is used to get Defuzzify's output to notify the player how close they are to the exit.
*/

FUNCTION_BLOCK tempRadius // Maps to a method

    VAR_INPUT	// input params to a method
         playerLocation : REAL;
         mazeExit : REAL;
    END_VAR

    VAR_OUTPUT  // return type from method
        player : REAL;
    END_VAR

    // Terms based on working out player's location in GameWindow's keyPressed & MazeExitLocator.
    // 8 terms to cover all possible locations.
    FUZZIFY playerLocation
        TERM northWest := (0,0) (5,1) (10,0);
        TERM north := (10,0) (15,1) (20,0);
        TERM northEast := (20,0) (25,1) (30,0);
        TERM centrum := (30,0) (35,1) (40,0);
        TERM southWest := (40,0) (45,1) (50,0);
        TERM south := (50,0) (55,1) (60,0);
        TERM southEast := (60,0) (65,1) (70,0);
        TERM nowhereNear := (80,0) (100,1) (120,0);
    END_FUZZIFY

    // mazeExit is randomly picked between 1 and 30.
    FUZZIFY mazeExit
        TERM indexSpotOne := (0,0) (5,1) (10,0);
        TERM indexSpotTwo := (10,0) (15,1) (20,0);
        TERM indexSpotThree := (20,0) (25,1) (30,0);
     END_FUZZIFY

    // Temperatures tell how close the player is to the mazeExit.
    DEFUZZIFY player // method body
        TERM frostbite := 180;
        TERM freezing := 150;
    	TERM cold := 120;
    	TERM chilly := 80;
    	TERM warmish := 60;
    	TERM warm := 30;
    	TERM hot := 20;
    	TERM redHot := 10;
    	METHOD : COGS;		// 'Center Of Gravity Singletons' defuzzification method
    	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
    END_DEFUZZIFY

    // Inference rules set - Used a Brute Force approach to cover all possible mazeExits.
    RULEBLOCK No1
    	AND : MIN;	// 'min' for 'and'
    	ACT : MIN;	// 'min' activation method
    	ACCU : MAX;	// 'max' accumulation method
    	// if mazeExit is in indexSpotOne (1 - 10)
    	RULE 1 : IF playerLocation IS nowhereNear AND mazeExit IS indexSpotOne THEN player IS frostbite;
    	RULE 2 : IF playerLocation IS southEast AND mazeExit IS indexSpotOne THEN player IS freezing;
    	RULE 3 : IF playerLocation IS south AND mazeExit IS indexSpotOne THEN player IS cold;
    	RULE 4 : IF playerLocation IS southWest AND mazeExit IS indexSpotOne THEN player IS chilly;
    	RULE 5 : IF playerLocation IS centrum AND mazeExit IS indexSpotOne THEN player IS warmish;
    	RULE 6 : IF playerLocation IS northEast AND mazeExit IS indexSpotOne THEN player IS warm;
    	RULE 7 : IF playerLocation IS north AND mazeExit IS indexSpotOne THEN player IS hot;
        RULE 8 : IF playerLocation IS northWest AND mazeExit IS indexSpotOne THEN player IS redHot;

        // if mazeExit is in indexSpotTwo (11 - 20)
        RULE 9 : IF playerLocation IS nowhereNear AND mazeExit IS indexSpotTwo THEN player IS frostbite;
        RULE 10 : IF playerLocation IS southEast AND mazeExit IS indexSpotTwo THEN player IS freezing;
        RULE 11 : IF playerLocation IS south AND mazeExit IS indexSpotTwo THEN player IS cold;
        RULE 12 : IF playerLocation IS southWest AND mazeExit IS indexSpotTwo THEN player IS chilly;
        RULE 13 : IF playerLocation IS centrum AND mazeExit IS indexSpotTwo THEN player IS warmish;
        RULE 14 : IF playerLocation IS northEast AND mazeExit IS indexSpotTwo THEN player IS warm;
        RULE 15 : IF playerLocation IS north AND mazeExit IS indexSpotTwo THEN player IS hot;
        RULE 16 : IF playerLocation IS northWest AND mazeExit IS indexSpotTwo THEN player IS redHot;

        // if mazeExit is in indexSpotThree (21 - 30)
        RULE 17 : IF playerLocation IS nowhereNear AND mazeExit IS indexSpotThree THEN player IS frostbite;
        RULE 18 : IF playerLocation IS southEast AND mazeExit IS indexSpotThree THEN player IS freezing;
        RULE 19 : IF playerLocation IS south AND mazeExit IS indexSpotThree THEN player IS cold;
        RULE 20 : IF playerLocation IS southWest AND mazeExit IS indexSpotThree THEN player IS chilly;
        RULE 21 : IF playerLocation IS centrum AND mazeExit IS indexSpotThree THEN player IS warmish;
        RULE 22 : IF playerLocation IS northEast AND mazeExit IS indexSpotThree THEN player IS warm;
        RULE 23 : IF playerLocation IS north AND mazeExit IS indexSpotThree THEN player IS hot;
        RULE 24 : IF playerLocation IS northWest AND mazeExit IS indexSpotThree THEN player IS redHot;
    END_RULEBLOCK

END_FUNCTION_BLOCK