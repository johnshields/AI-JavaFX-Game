FUNCTION_BLOCK tempRadius // Maps to a method

    VAR_INPUT	// input params to a method
         playerLocation : REAL;
         mazeExit : REAL;
    END_VAR

    VAR_OUTPUT  // return type from method
        player : REAL;
    END_VAR

    // Terms based on working out player's location in keyPressed - GameWindow.
    FUZZIFY playerLocation
        TERM noWhereNear := 130; // to stop variable being out of range when the player in placed.
    	TERM southEast := 50;
    	TERM south := 40;
    	TERM southWest := 30;
        TERM centrum := 25;
        TERM northEast := 20;
        TERM north := 15;
        TERM northWest := 10;
    END_FUZZIFY

    // mazeExit is randomly picked between 1 and 30.
    FUZZIFY mazeExit
        TERM indexSpotOne := (0,0) (5,1) (10,0);
        TERM indexSpotTwo := (10,0) (15,1) (20,0);
        TERM indexSpotThree := (20,0) (25,1) (30,0);
     END_FUZZIFY
     
    // TODO - have TERMs in a range like mazeExit
    // temperatures tell how close the player is to the mazeExit
    DEFUZZIFY player // method body
        TERM freezing := 150;
    	TERM cold := 120;
    	TERM chilly := 80;
    	TERM warm := 60;
    	TERM warmer := 30;
    	TERM hot := 20;
    	TERM redHot := 10;
    	METHOD : COGS;		// Use 'Center Of Gravity' defuzzification method
    	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
    END_DEFUZZIFY

    // Inference rules set - Used a Brute Force approach to cover all possible mazeExits.
    RULEBLOCK No1
    	AND : MIN;	// Use 'min' for 'and'
    	ACT : MIN;	// Use 'min' activation method
    	ACCU : MAX;	// Use 'max' accumulation method
    	// if mazeExit is in indexSpotOne (1 - 10)
    	RULE 1 : IF playerLocation IS southEast AND mazeExit IS indexSpotOne THEN player IS freezing;
    	RULE 2 : IF playerLocation IS south AND mazeExit IS indexSpotOne THEN player IS cold;
    	RULE 3 : IF playerLocation IS southWest AND mazeExit IS indexSpotOne THEN player IS chilly;
    	RULE 4 : IF playerLocation IS centrum AND mazeExit IS indexSpotOne THEN player IS warm;
    	RULE 5 : IF playerLocation IS northEast AND mazeExit IS indexSpotOne THEN player IS warmer;
    	RULE 6 : IF playerLocation IS north AND mazeExit IS indexSpotOne THEN player IS hot;
        RULE 7 : IF playerLocation IS northWest AND mazeExit IS indexSpotOne THEN player IS redHot;

        // if mazeExit is in indexSpotTwo (11 - 20)
        RULE 8 : IF playerLocation IS southEast AND mazeExit IS indexSpotTwo THEN player IS freezing;
        RULE 9 : IF playerLocation IS south AND mazeExit IS indexSpotTwo THEN player IS cold;
        RULE 10 : IF playerLocation IS southWest AND mazeExit IS indexSpotTwo THEN player IS chilly;
        RULE 11 : IF playerLocation IS centrum AND mazeExit IS indexSpotTwo THEN player IS warm;
        RULE 12 : IF playerLocation IS northEast AND mazeExit IS indexSpotTwo THEN player IS warmer;
        RULE 13 : IF playerLocation IS north AND mazeExit IS indexSpotTwo THEN player IS hot;
        RULE 14 : IF playerLocation IS northWest AND mazeExit IS indexSpotTwo THEN player IS redHot;

        // if mazeExit is in indexSpotThree (21 - 30)
        RULE 15 : IF playerLocation IS southEast AND mazeExit IS indexSpotThree THEN player IS freezing;
        RULE 16 : IF playerLocation IS south AND mazeExit IS indexSpotThree THEN player IS cold;
        RULE 17 : IF playerLocation IS southWest AND mazeExit IS indexSpotThree THEN player IS chilly;
        RULE 18 : IF playerLocation IS centrum AND mazeExit IS indexSpotThree THEN player IS warm;
        RULE 19 : IF playerLocation IS northEast AND mazeExit IS indexSpotThree THEN player IS warmer;
        RULE 20 : IF playerLocation IS north AND mazeExit IS indexSpotThree THEN player IS hot;
        RULE 21 : IF playerLocation IS northWest AND mazeExit IS indexSpotThree THEN player IS redHot;
    END_RULEBLOCK

END_FUNCTION_BLOCK